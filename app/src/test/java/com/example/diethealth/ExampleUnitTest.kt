package com.example.diethealth

import org.junit.Test

import org.junit.Assert.*
import kotlin.math.roundToInt

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {

    private val user = User("Jim",55.0,180.0, 17.0, "Male",1.9 )
    private val cal = CalendarInfo("2004","3","17")


    /**
     * Checks if the number of calories per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun calories_isCorrect(){
        assertEquals(3048,user.metabolicRate().roundToInt())
    }
    /**
     * Checks if the vitamin A intake per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun vitaminA_isCorrect(){
        assertEquals(900,user.dailyVitaminAIntake())
    }
    /**
     * Checks if the vitamin C intake per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun vitaminC_isCorrect(){
        assertEquals(75,user.dailyVitaminCIntake())
    }
    /**
     * Checks if the zinc intake per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun zinc_isCorrect(){
        assertEquals(11,user.dailyZincIntake())
    }
    /**
     * Checks if the calcium intake per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun calcium_isCorrect(){
        assertEquals(1300,user.dailyCalciumIntake())
    }
    /**
     * Checks if the folate intake per day matches the expected result calculated before-hand
     * based on the attributes of Jim
     */
    @Test
    fun folate_isCorrect(){
        assertEquals(400,user.dailyFolateIntake())
    }
    /**
     * Checks if the month given as a String (stores a number generated by calendar) matches to the
     * appropriate month
     */
    @Test
    fun monthNumberToString(){
        //month int value is 1 less than expected because January starts at 0
        assertEquals("April",cal.findMonth())
    }
    /**
     * Checks if the year given as a String matches to the appropriate year
     */
    @Test
    fun year(){
        assertEquals(2004,cal.findYear().toInt())
    }
    /**
     * Checks if the day given as a String  matches to the appropriate month
     */
    @Test
    fun day(){
        assertEquals(17,cal.findDay().toInt())
    }

}